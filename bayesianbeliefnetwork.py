# -*- coding: utf-8 -*-
"""EXPT5_BayesianBeliefNetwork.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16kVw-fsGxaSiz-KuyN-6gVha1EWmfPc7
"""
# Truth value which tells whether a Burglary has occurred or not
burgtval = ''
# Truth value which tells whether an Earthquake has occurred or not
earttval = ''
# Truth value which tells whether any other incident has occurred or not
truthval = ''
# @title Final Approach
def get_values_from_problem_statement(probstat, primkeywlist, seckeywlist, nodes):
    global burgtval, earttval, truthval
    pswords = probstat.split()
    tvallst = list()
    valulst = list()
    # What is the probability that no Burglar no Earthquake has occurred but yes Alarm has sounded and yes John and yes Mary call?
    # List of primary key word - secondary key word pairs
    for i in range(0, len(pswords)):
        if pswords[i] in primkeywlist:
            if pswords[i-1] in seckeywlist:
                print(pswords[i], pswords[i-1])
                if pswords[i-1] == "yes":
                    truthval = 'T'
                    if pswords[i] == "Burglar":
                        burgtval = 'T'
                    if pswords[i] == "Earthquake":
                        earttval = 'T'
                elif pswords[i-1] == "no":
                    truthval = 'F'
                    if pswords[i] == "Burglar":
                        burgtval = 'F'
                    if pswords[i] == "Earthquake":
                        earttval = 'F'
                    print(burgtval, earttval)
                values = nodes[f'{pswords[i]}']
                for value in values:
                    if pswords[i] == "Alarm":
                        if value[0] == burgtval and value[1] == earttval and truthval == 'T':
                            print(value)
                            valulst.append(float(value[2]))
                    else:
                        if value[0] == truthval:
                            print(value)
                            valulst.append(float(value[1]))
    return valulst

def main():
    nodes = {
    "Alarm": [['B', 'E', 'P(A|B,E)'], ['T', 'T', '0.95    '], ['T', 'F', '0.94    '], ['F', 'T', '0.29    '], ['F', 'F', '0.001   ']],
    "Burglar": [['B', 'P(B) '], ['T', 0.001], ['F', 0.999]],
    "Earthquake": [['E', 'P(E) '], ['T', 0.002], ['F', 0.998]],
    "John": [['A', 'P(J|A)'], ['T', '0.90  '], ['F', '0.05  ']],
    "Mary": [['A', 'P(M|A)'], ['T', '0.70  '], ['F', '0.01  ']]
    }

    print('We are going to demonstrate Bayesian Belief Network using the Burglar Alarm Example')
    for node, table in nodes.items():
        print(f'The following information is available about the {node} node.')
        for row in table:
            print('|', end = ' ')
            for value in row:
                print(value, end=' | ')
            print()

    # keep taking Problem Statement as input until the condition is satisfied
    cont = True
    # keywords list
    primkeywlist = ['Alarm', 'Burglar', 'Earthquake', 'John', 'Mary']
    seckeywlist = ['yes', 'no']
    print(f'The Problem Statement should contain these keywords in order for the program to interpret the question correctly:\n{primkeywlist}')

    while(cont == True):
        probstat = input('Enter the probability you want to calculate: ')
        # probstat = "What is the probability that yes Alarm has sounded but no Burglar no Earthquake has occurred and yes John and yes Mary call?"
        # problem statement
        #probstat = "What is the Probability that Call?"
        # words in problem statement
        prswords = probstat.split()
        # keywords in the problem statement, based on which what probability is to be calculated can be ascertained.
        keywords = list()
        for word in prswords:
            if word in primkeywlist:
                keywords.append(word)
        if len(keywords) < 1:
            print('At least one keyword is required to proceed.\nPlease try again.')
        else:
            print(f'Keywords found from Problem Statement: {keywords}')
            cont = False


    valulst = get_values_from_problem_statement(probstat, primkeywlist, seckeywlist, nodes)
    print(valulst)

    calc_prob = 1
    for value in valulst:
        calc_prob = calc_prob * value
    print(f'Required Probability: {calc_prob:.6f}')

if __name__ == "__main__":
    main()